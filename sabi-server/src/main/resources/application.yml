accessToken:
  # Exchange all values to suite your productive needs.
  SECRET: p$vmb4*.UV51Ke7akjkjhkjhnbmn7687632jhkjhkj
  # Valid duration of the access token in seconds. (The access token is used as session replacement)
  TTL: 600

## Connection parameter to the captcha service
captcha:
  check:
    url: http://blackpearl:8081/captcha/api/check
debug: false


eclipselink:
  # only for debugging more jpa logging
  #
  #OFF	This setting disables the generation of the log output. You may want to set logging to OFF during production to avoid the overhead of logging.
  #SEVERE	This level enables reporting of failure cases only. Usually, if the failure occurs, the application stops.
  #WARNING	This level enables logging of issues that have a potential to cause problems. For example, a setting that is picked by the application and not by the user.
  #INFO	This level enables the standard output. The contents of this output is very limited. It is the default logging level if a logging level is not set.
  #CONFIG	This level enables logging of such configuration details as your database login information and some metadata information. You may want to use the CONFIG log level at deployment time.
  #FINE	This level enables logging of the first level of the debugging information and SQL. You may want to use this log level during debugging and testing, but not at production.
  #FINER	This level enables logging of more debugging information than the FINE setting. For example, the transaction information is logged at this level. You may want to use this log level during debugging and testing, but not at production.
  #FINEST	This level enables logging of more debugging information than the FINER setting, such as a very detailed information about certain features (for example, sequencing). You may want to use this log level during debugging and testing, but not at production.
  #ALL	This level currently logs at the same level as FINEST.
  logging:
    level: INFO
  # Eclipselink related (Those settings will be effective only if injected in JPAConfig.java)
  target-database: MySQL
h2:
  test:
    mode: false

# Health check for cloud deployment
# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-enabling-endpoints
management:
  endpoint:
    health:
      enabled: true
      show-details: always
    info:
      enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: metrics,health,info,prometheus
sabi:
  mailvalidation:
    url: http://blackpearl:8080/sabi/api/auth/
server:
  port: 8080
  servlet:
    context-path: /sabi
  tomcat:
    mbeanregistry:
      enabled: true

spring:
  application:
    name: sabi-service
  # JPA Database configuration
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    # Hikari Connection Pool
    hikari:
      connection-timeout: 3000
      maximum-pool-size: 50
      minimum-idle: 5
    password: sabi123
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mariadb://localhost:3306/sabi
    username: sabiapp
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  ## To initialize the SMTP interface (used by spring mail auto-configuration)
  # for local development I recommend to use fakeSMTP (under linux) or smtp4dev (under windows)
  mail:
    host: localhost
    username: sabi@bluewhale.de
    password: YouWillNeverKnow
    port: 2525
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
