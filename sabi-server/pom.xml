<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2022 by Stefan Schubert under the MIT License (MIT).
  ~ See project LICENSE file for the detailed terms and conditions.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <!-- Taking care to have all spring dependencies right. -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>de.bluewhale</groupId>
    <artifactId>sabi-server</artifactId>
    <version>1.3.2</version>
    <packaging>jar</packaging>
    <description>Backend consistent of internal CRUD services which will be used by the REST service orchestration
    </description>

    <inceptionYear>2015</inceptionYear>

    <developers>
        <!-- PLEASE ADD YOURSELF HERE for maven site docu
        If you like to have an image link, you need to have a gravatar registered with the used email address here. -->
        <developer>
            <id>StS</id>
            <name>Stefan Schubert</name>
            <email>stefan.schubert@bluewhale.de</email>
            <roles>
                <role>Project-Maintainer</role>
                <role>Product-Owner</role>
                <role>Developer</role>
            </roles>
        </developer>
    </developers>

    <properties>
        <sabi.boundary.version>1.0.6</sabi.boundary.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <log4j2.version>2.17.2</log4j2.version>
        <springdoc.version>1.6.10</springdoc.version>

        <eclipselink.version>2.7.9</eclipselink.version>
<!--                <eclipselink.version>3.1.0-M1</eclipselink.version>-->
<!--                <eclipselink.version>4.0.0-M3</eclipselink.version>-->
        <!--
                Caution since 3.x we have some API changes - because Impl of PersistenceProvider seems
                to have been extracted from the jar or migrated and won't be found
                through current springboot 2.4.3 deps.
        -->
        <micrometer.prometheus.version>1.10.0-M4</micrometer.prometheus.version>
<!--        <micrometer.prometheus.version>1.8.1</micrometer.prometheus.version>-->
<!--        <micrometer.prometheus.version>2.0.0-M3</micrometer.prometheus.version>-->
        <spring.instrument.version>6.0.0-M4</spring.instrument.version>
        <surefire.version>3.0.0-M7</surefire.version>
        <lombok.version>1.18.24</lombok.version>
        <owasp.plugin.version>7.1.2</owasp.plugin.version>
        <maven.versions.plugin.version>2.11.0</maven.versions.plugin.version>
        <jsonwebtoken.version>0.9.1</jsonwebtoken.version>
        <passay.version>1.6.2</passay.version>
        <mariadb.java.client.version>3.0.7</mariadb.java.client.version>
        <h2.version>2.1.214</h2.version>
        <dumbster.version>1.6</dumbster.version>
        <junit.version>4.13.2</junit.version>
        <archunit.version>0.23.1</archunit.version>
    </properties>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <groupId>org.apache.maven.surefire</groupId>
                <artifactId>surefire-junit47</artifactId>
                <version>${surefire.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <repositories>
        <repository>
            <id>repository.spring.milestone</id>
            <name>Spring Milestone Repository</name>
            <url>http://repo.spring.io/milestone</url>
        </repository>
    </repositories>

    <dependencies>

        <!-- SABI Modules -->

        <dependency>
            <groupId>de.bluewhale</groupId>
            <artifactId>sabi-boundary</artifactId>
            <version>${sabi.boundary.version}</version>
        </dependency>

        <!-- used Spring Framework -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <!-- Because we want to use eclipselink instead -->
                <exclusion>
                    <artifactId>hibernate-entitymanager</artifactId>
                    <groupId>org.hibernate</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Required for Rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <!-- favor log4j2 over logback -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>

        <!-- For spring-security in combination with JWT -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>${jsonwebtoken.version}</version>
        </dependency>

        <!-- Spring Framework Caching Support (using hazelcast as distributed IMDG) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast</artifactId>
        </dependency>
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast-spring</artifactId>
        </dependency>


        <!-- For talking with an SMTP agent -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- For using javax.validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- For Password Strength Policy -->
        <dependency>
            <groupId>org.passay</groupId>
            <artifactId>passay</artifactId>
            <version>${passay.version}</version>
        </dependency>

        <!-- used JPA Configuration / Implementation -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <version>${eclipselink.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>${mariadb.java.client.version}</version>
        </dependency>


        <!-- Common Stuff -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <!-- Monitoring
             The next ones are required for providing
             http://host:port/actuator/prometheus
        -->

        <!-- Spring boot actuator to expose metrics endpoint -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Micrometer core dependency  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>

        <!-- REST API-Doc using Springdoc https://springdoc.org -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>${springdoc.version}</version>
        </dependency>

<!--
        May be helpful if you choose to work with @AuthenticationPrincipal on RestControllers instead
        of defining Rules on WebSecurityConfig class.
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-security</artifactId>
            <version>${springdoc.version}</version>
        </dependency>
-->

        <!-- just to download the eclipse jpa weaver which will be referenced as javaagent -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-instrument</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <!-- This is the replacement database which will
                 we used by tests which have been annotated with @JpaDataTest
                 https://mvnrepository.com/artifact/com.h2database/h2
                 -->
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Provides a simple smtp server, such that the content of generated emails
             can be checked in junit tests as well.
             https://mvnrepository.com/artifact/dumbster/dumbster -->
        <dependency>
            <groupId>dumbster</groupId>
            <artifactId>dumbster</artifactId>
            <version>${dumbster.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>activation</artifactId>
                    <groupId>javax.activation</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>mail</artifactId>
                    <groupId>javax.mail</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <!-- In case you want to switch from junit4.x make sure to adopt the surefire provider as well. -->
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Supports checking on architectural integrity -->
        <dependency>
            <groupId>com.tngtech.archunit</groupId>
            <artifactId>archunit</artifactId>
            <version>${archunit.version}</version>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>sabi-service</finalName>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <encoding>UTF-8</encoding>
                    <annotationProcessorPaths>
                        <!-- Process lombok annotations found in included libraries.
                             Required e.g. for sabi-boundary.
                        -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${surefire.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-instrument</artifactId>
                        <version>${spring.instrument.version}</version>
                    </dependency>
                    <dependency>
                        <!-- Surefire seemed to have difficulties to determine the test provider junit4
                        in our case, so we configured the provider manually here.-->
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit47</artifactId>
                        <version>${surefire.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <test>de.bluewhale.sabi.MasterTestSuite</test>
                    <argLine>
                        -javaagent:${settings.localRepository}/org/springframework/spring-instrument/${spring.instrument.version}/spring-instrument-${spring.instrument.version}.jar
                    </argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-instrument</artifactId>
                        <version>${spring.instrument.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <jvmArguments>
                        -javaagent:${settings.localRepository}/org/springframework/spring-instrument/${spring.instrument.version}/spring-instrument-${spring.instrument.version}.jar
                    </jvmArguments>
                    <!-- Build a fully executable jar to use it via /etc/init.d
                         see https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
                    -->
                    <executable>true</executable>
                </configuration>
            </plugin>
            <plugin>
                <!-- Used for vulnerability checks
                 The examples below can be executed using mvn verify.
                 -->
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>${owasp.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>verify</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- This will check for newer version on dependencies which are
                     controlled by version property variables -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${maven.versions.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
<!--                            <goal>display-dependency-updates</goal>-->
<!--                            <goal>display-plugin-updates</goal>-->
                            <goal>display-property-updates</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>