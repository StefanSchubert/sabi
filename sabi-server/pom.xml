<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024 by Stefan Schubert under the MIT License (MIT).
  ~ See project LICENSE file for the detailed terms and conditions.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <!-- Taking care to have all spring dependencies right. -->
        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent -->
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>de.bluewhale</groupId>
    <artifactId>sabi-server</artifactId>
    <version>1.3.8</version>
    <packaging>jar</packaging>
    <description>Backend consistent of internal CRUD services which will be used by the REST service orchestration
    </description>

    <inceptionYear>2015</inceptionYear>

    <developers>
        <developer>
            <id>StS</id>
            <name>Stefan Schubert</name>
            <email>stefan.schubert@bluewhale.de</email>
            <roles>
                <role>Project-Maintainer</role>
                <role>Product-Owner</role>
                <role>Developer</role>
            </roles>
        </developer>
    </developers>

    <properties>
        <archunit.version>1.2.1</archunit.version>
        <assertj-core.version>3.26.3</assertj-core.version>
        <auth0.jwt.version>4.5.0</auth0.jwt.version>
        <dumbster.version>1.6</dumbster.version>
        <eclipselink.version>4.0.2</eclipselink.version>
        <flyway.version>11.8.0</flyway.version>
        <jakarta.xml.bind.version>4.0.2</jakarta.xml.bind.version>
        <java.version>22</java.version>
        <javax.annotation-api.version>1.3.2</javax.annotation-api.version>
        <jetbrains.annotation.version>26.0.2</jetbrains.annotation.version>
        <junit-jupiter-api.version>5.10.2</junit-jupiter-api.version>
        <junit-platform-suite-engine.version>1.11.1</junit-platform-suite-engine.version>
        <junit-platform-suite-api.version>1.11.1</junit-platform-suite-api.version>
        <junit.testcontainer.version>1.21.0</junit.testcontainer.version>
        <log4j2.version>2.20.0</log4j2.version>
        <lombok.version>1.18.38</lombok.version>
        <mapstruct.version>1.6.3</mapstruct.version>
        <mariadb.java.client.version>3.5.3</mariadb.java.client.version>
        <mariadb.testcontainer.version>1.21.0</mariadb.testcontainer.version>
        <maven-surefire-plugin.version>3.5.3</maven-surefire-plugin.version>
        <micrometer.prometheus.version>1.13.5</micrometer.prometheus.version>
        <owasp.plugin.version>12.1.1</owasp.plugin.version>
        <passay.version>1.6.6</passay.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <sabi.boundary.version>1.2.10</sabi.boundary.version>
        <spring.instrument.version>6.2.6</spring.instrument.version>
        <springdoc.openapiv2.version>2.8.6</springdoc.openapiv2.version>
        <versions.maven.plugin.version>2.18.0</versions.maven.plugin.version>
        <mapstruts-lombok-binding.version>0.2.0</mapstruts-lombok-binding.version>
    </properties>

    <dependencies>

        <!-- SABI Modules -->

        <dependency>
            <groupId>de.bluewhale</groupId>
            <artifactId>sabi-boundary</artifactId>
            <version>${sabi.boundary.version}</version>
        </dependency>

        <!-- used Spring Framework -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <exclusions>
                <!-- Because we want to use eclipselink instead -->
                <exclusion>
                    <artifactId>hibernate-entitymanager</artifactId>
                    <groupId>org.hibernate</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Required for Rest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <!-- favor log4j2 over logback -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>

        <!-- For spring-security in combination with JWT -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- THE NEXT THREE DEPS ARE ONLY FOR JWT HANDLING, THIS SHOULD BE SIMPLYFIED, AS SOON AS
             SPRINGS OWN JWT IS COMPATIBLE WITH SPRIMG 6 -->
        <dependency>
            <!-- https://github.com/auth0/java-jwt -->
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>${auth0.jwt.version}</version>
        </dependency>
        <!-- API, java.xml.bind module -->
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
            <version>${jakarta.xml.bind.version}</version>
        </dependency>
        <!-- Runtime, com.sun.xml.bind module -->
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>${glassfish-jaxb.version}</version>
        </dependency>


        <!-- Spring Framework Caching Support (using hazelcast as distributed IMDG) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast</artifactId>
        </dependency>
        <dependency>
            <groupId>com.hazelcast</groupId>
            <artifactId>hazelcast-spring</artifactId>
        </dependency>


        <!-- For talking with an SMTP agent -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
        </dependency>

        <!-- For using javax.validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- For Password Strength Policy -->
        <dependency>
            <groupId>org.passay</groupId>
            <artifactId>passay</artifactId>
            <version>${passay.version}</version>
        </dependency>

        <!-- used JPA Configuration / Implementation -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <version>${eclipselink.version}</version>
        </dependency>

        <dependency>
            <!-- MapStruct Bean Mapping dependencies -->
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <!-- required as we got an error of enum When.MAYBE not
            found. Seemed that one dependency was using it, without
            providing the api here which defines the enum.-->
            <groupId>javax.annotation</groupId>
            <artifactId>javax.annotation-api</artifactId>
            <version>${javax.annotation-api.version}</version>
        </dependency>

        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
            <version>${mariadb.java.client.version}</version>
        </dependency>


        <!-- Common Stuff -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- Monitoring
             The next ones are required for providing
             http://host:port/actuator/prometheus
        -->

        <!-- Spring boot actuator to expose metrics endpoint -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- Micrometer core dependency  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>

        <!-- REST API-Doc using Springdoc https://springdoc.org -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>${springdoc.openapiv2.version}</version>
        </dependency>

        <!-- just to download the eclipse jpa weaver which will be referenced as javaagent -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-instrument</artifactId>
        </dependency>

        <!-- Test dependencies, Since SB3 we have junit5 as default  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>${junit.testcontainer.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-engine</artifactId>
            <version>${junit-platform-suite-engine.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-suite-api</artifactId>
            <version>${junit-platform-suite-api.version}</version> <!-- oder eine neuere Version -->
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>mariadb</artifactId>
            <version>${mariadb.testcontainer.version}</version>
            <scope>test</scope>
        </dependency>

<!-- Already via Spring Boot Test included.
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${junit-jupiter-api.version}</version>
            <scope>test</scope>
        </dependency>
        -->

        <!-- AssertJ -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj-core.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Using Flyway to populate testcontainer
             this also tests our migration scripts for the database -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-mysql</artifactId>
            <version>${flyway.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Provides a simple smtp server, such that the content of generated emails
             can be checked in junit tests as well.
             https://mvnrepository.com/artifact/dumbster/dumbster -->
        <dependency>
            <groupId>dumbster</groupId>
            <artifactId>dumbster</artifactId>
            <version>${dumbster.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>activation</artifactId>
                    <groupId>javax.activation</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>mail</artifactId>
                    <groupId>javax.mail</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Supports checking on architectural integrity -->
        <dependency>
            <groupId>com.tngtech.archunit</groupId>
            <artifactId>archunit</artifactId>
            <version>${archunit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <!-- https://github.com/JetBrains/java-annotations
                 A set of Java annotations which can be used in JVM-based languages.
                 They serve as an additional documentation and can be interpreted by IDEs
                 and static analysis tools to improve code analysis.
            -->
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>${jetbrains.annotation.version}</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <build>
        <finalName>sabi-service</finalName>

        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
            </testResource>
            <!-- We are using the flyway script from the database module to populate the
                 testcontainers during testing. To enable flyway to access the scripts from
                 outside we add the location as ressource folder so flyway can access them
                 via the classpath during test execution. -->
            <testResource>
                <directory>../sabi-database/src/main/resources</directory>
            </testResource>
        </testResources>


        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <encoding>UTF-8</encoding>
                    <annotationProcessorPaths>
                        <path>
                        <!-- Process lombok annotations found in included libraries.
                             Required e.g. for sabi-boundary.
                        -->
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                        <path>
                            <!-- Handle Mapstruts annotations. Important: Ensure that Lombok
                             comes first otherwise mapstrut would complain about missing properties. -->
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${mapstruts-lombok-binding.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven-surefire-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.surefire</groupId>
                        <artifactId>surefire-junit-platform</artifactId>
                        <version>${maven-surefire-plugin.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-instrument</artifactId>
                        <version>${spring.instrument.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <!--suppress UnresolvedMavenProperty -->
                    <argLine>
                        -javaagent:${settings.localRepository}/org/springframework/spring-instrument/${spring.instrument.version}/spring-instrument-${spring.instrument.version}.jar
                    </argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-instrument</artifactId>
                        <version>${spring.instrument.version}</version>
                    </dependency>
                </dependencies>
                <configuration>
                    <!--suppress UnresolvedMavenProperty -->
                    <jvmArguments>
                        -javaagent:${settings.localRepository}/org/springframework/spring-instrument/${spring.instrument.version}/spring-instrument-${spring.instrument.version}.jar
                    </jvmArguments>
                    <!-- Build a fully executable jar to use it via /etc/init.d
                         see https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
                    -->
                    <executable>true</executable>
                </configuration>
            </plugin>
            <plugin>
                <!-- This will check for newer version on dependencies which are
                     controlled by version property variables -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <!--                            <goal>display-dependency-updates</goal>-->
                            <!--                            <goal>display-plugin-updates</goal>-->
                            <goal>display-property-updates</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>owasp-check</id>
            <!-- Used for vulnerability checks
 The examples below can be executed using mvn verify.
 -->
            <activation>
                <property>
                    <!-- Check only, if we have injected an API key -->
                    <name>nvd.api.key</name>
                    <value>!@{nvd.api.key}</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <version>${owasp.plugin.version}</version>
                        <configuration>
                            <!-- You need to register yourself at https://nvd.nist.gov/
     to get an API-KEY, which you can store in the
     properties section of your local settings.xml -->
                            <nvdApiKey>${nvd.api.key}</nvdApiKey>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>