<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2024 by Stefan Schubert under the MIT License (MIT).
  ~ See project LICENSE file for the detailed terms and conditions.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.bluewhale</groupId>
    <artifactId>sabi-webclient</artifactId>
    <version>1.2.9</version>
    <packaging>jar</packaging>
    <name>sabi-webclient</name>
    <description>A JSF based webclient for sabi.</description>
    <url>https://github.com/StefanSchubert/sabi</url>

    <inceptionYear>2015</inceptionYear>
    <!--
         Thanks to https://codenotfound.com/jsf-primefaces-example.html
         which showed me the way on how to combine jsf with spring boot in a proper way.
    -->

    <scm>
        <connection>scm:git:https://github.com/StefanSchubert/sabi</connection>
        <url>https://github.com/StefanSchubert/sabi</url>
    </scm>

    <developers>
        <!-- PLEASE ADD YOURSELF HERE for maven site docu
        If you like to have an image link, you need to have a gravatar registered with the used email address here. -->
        <developer>
            <id>StS</id>
            <name>Stefan Schubert</name>
            <email>stefan.schubert@bluewhale.de</email>
            <roles>
                <role>Project-Maintainer</role>
                <role>Product-Owner</role>
                <role>Software-Architect</role>
                <role>Developer</role>
                <role>Support-Engineer</role>
            </roles>
        </developer>
    </developers>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>22</java.version>
        <log4j2.version>2.20.0</log4j2.version>
        <jakarta.cdi.version>4.1.0</jakarta.cdi.version>
        <micrometer.prometheus.version>1.13.3</micrometer.prometheus.version>
        <joinfaces.version>5.2.2</joinfaces.version>
        <sabi.boundary.version>1.2.9</sabi.boundary.version>
        <passay.version>1.6.5</passay.version>
        <owasp.plugin.version>10.0.3</owasp.plugin.version>
        <lombok.version>1.18.34</lombok.version>
        <versions.maven.plugin.version>2.17.1</versions.maven.plugin.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- https://mvnrepository.com/artifact/org.joinfaces/joinfaces-dependencies -->
                <groupId>org.joinfaces</groupId>
                <artifactId>joinfaces-dependencies</artifactId>
                <version>${joinfaces.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- Primefaces -->
        <dependency>
            <groupId>org.joinfaces</groupId>
            <artifactId>primefaces-spring-boot-starter</artifactId>
            <version>${joinfaces.version}</version>
            <exclusions>
                <exclusion>
                    <!-- favor log4j2 over logback -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Spring boot actuator to expose metrics endpoint -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-logging</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <!-- Micrometer core dependency  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>

        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <version>${jakarta.cdi.version}</version>
        </dependency>

        <!-- Required to enable of page redirects, as we no longer have the web.xml
             see https://codenotfound.com/jsf-primefaces-welcome-page-redirect-example.html
             but and because of Spring5 we need the WebMvcConfigurer so we add the following dep:
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <!-- favor log4j2 over logback -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>


        <!-- For spring-security in combination with JWT -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- For using jakarta.validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <exclusions>
                <exclusion>
                    <!-- favor log4j2 over logback -->
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Sharing of TOs with the Backend -->
        <dependency>
            <groupId>de.bluewhale</groupId>
            <artifactId>sabi-boundary</artifactId>
            <version>${sabi.boundary.version}</version>
        </dependency>

        <!-- Required for data export functionality

            ON HOLD lowagie and apachie poi libs with primefaces < 10.x
            With latest release of PF they are going to shift to
            open libre and successor libs...
            However this depends on the PF version, that comes
            bundled with join-faces. Revisit this issue Q3/2021
            CSV Export works out of the box and will be sufficient
            for the start.

        -->

        <!-- For Password Strength Policy -->
        <dependency>
            <groupId>org.passay</groupId>
            <artifactId>passay</artifactId>
            <version>${passay.version}</version>
        </dependency>

        <!-- Test Context -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>sabi-webclient</finalName>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <encoding>UTF-8</encoding>
                    <annotationProcessorPaths>
                        <!-- Process lombok annotations found in included libraries.
                             Required e.g. for sabi-boundary.
                        -->
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${lombok.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <!--
                Description from: https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html
                The Spring Boot Maven Plugin provides Spring Boot support in Maven,
                letting you package executable jar or war archives and run an application
                “in-place”. To use it, you must use Maven 3.2 (or later).
                -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- Build a fully executable jar to use it via /etc/init.d
                         see https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
                    -->
                    <executable>true</executable>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- This will check for newer version on dependencies which are
                     controlled by version property variables -->
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>${versions.maven.plugin.version}</version>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <!--                            <goal>display-dependency-updates</goal>-->
                            <!--                            <goal>display-plugin-updates</goal>-->
                            <goal>display-property-updates</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

    <profiles>
        <profile>
            <id>owasp-check</id>
            <!-- Used for vulnerability checks
 The examples below can be executed using mvn verify.
 -->
            <activation>
                <property>
                    <!-- Check only, if we have injected an API key -->
                    <name>nvd.api.key</name>
                    <value>!@{nvd.api.key}</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.owasp</groupId>
                        <artifactId>dependency-check-maven</artifactId>
                        <version>${owasp.plugin.version}</version>
                        <configuration>
                            <!-- You need to register yourself at https://nvd.nist.gov/
     to get an API-KEY, which you can store in the
     properties section of your local settings.xml -->
                            <nvdApiKey>${nvd.api.key}</nvdApiKey>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>
