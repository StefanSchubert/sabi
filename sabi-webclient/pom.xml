<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2021 by Stefan Schubert under the MIT License (MIT).
  ~ See project LICENSE file for the detailed terms and conditions.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.bluewhale</groupId>
    <artifactId>sabi-webclient</artifactId>
    <version>0.4-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>sabi-webclient</name>
    <description>A JSF based webclient for sabi.</description>
    <url>https://github.com/StefanSchubert/sabi</url>

    <inceptionYear>2015</inceptionYear>
    <!--
         Thanks to https://codenotfound.com/jsf-primefaces-example.html
         which showed me the way on how to combine jsf with spring boot in a proper way.
    -->

    <developers>
        <!-- PLEASE ADD YOURSELF HERE for maven site docu
        If you like to have an image link, you need to have a gravatar registered with the used email address here. -->
        <developer>
            <id>StS</id>
            <name>Stefan Schubert</name>
            <email>stefan.schubert@bluewhale.de</email>
            <roles>
                <role>Project-Maintainer</role>
                <role>Product-Owner</role>
                <role>Software-Architect</role>
                <role>Developer</role>
                <role>Support-Engineer</role>
            </roles>
        </developer>
    </developers>


    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.3</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <sabi.version>1.0-SNAPSHOT</sabi.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <micrometer.prometheus.version>1.5.4</micrometer.prometheus.version>
<!-- PF10.0 -->
        <joinfaces.version>4.5.0-m2</joinfaces.version>
<!--    PF8.0
<joinfaces.version>4.4.3</joinfaces.version>-->
        <sabi.backend.version>1.0-SNAPSHOT</sabi.backend.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.joinfaces</groupId>
                <artifactId>joinfaces-dependencies</artifactId>
                <version>${joinfaces.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- Primefaces -->
        <dependency>
            <groupId>org.joinfaces</groupId>
            <artifactId>primefaces-spring-boot-starter</artifactId>
        </dependency>

        <dependency>
            <!-- Theme Management has been changed with at least PF 10. Splitted in to commercial and community ones.
                 they need now to be added as you wish. At least for now Apr'21 they are not automatically included
                 via joinfaces. -->
            <groupId>org.primefaces.themes</groupId>
            <artifactId>flick</artifactId>
            <version>1.0.10</version>
        </dependency>

        <!-- Spring boot actuator to expose metrics endpoint -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Micrometer core dependency  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>
        <!-- Micrometer Prometheus registry  -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer.prometheus.version}</version>
        </dependency>


        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
        </dependency>

        <!-- Required to be enable of page redirects, as we no longer have the web.xml
             see https://codenotfound.com/jsf-primefaces-welcome-page-redirect-example.html
             but and because of Spring5 we need the WebMvcConfigurer so we add the following dep:
         -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>


        <!-- For spring-security in combination with JWT -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- For using javax.validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!-- Sharing of TOs with the Backend -->
        <dependency>
            <groupId>de.bluewhale</groupId>
            <artifactId>sabi-boundary</artifactId>
            <version>${sabi.backend.version}</version>
        </dependency>

        <!-- Required for data export functionality

            ON HOLD lowagie and apachie poi libs with primefaces < 10.x
            With latest release of PF they are going to shift to
            open libre and successor libs...
            However this depends on the PF version, that comes
            bundled with join-faces. Revisit this issue Q3/2021
            CSV Export works out of the box and will be sufficient
            for the start.

        -->


        <!-- Test Context -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.18</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>sabi-webclient</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.joinfaces</groupId>
                    <artifactId>joinfaces-maven-plugin</artifactId>
                    <version>${joinfaces.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>classpath-scan</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${java.version}</release>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            <plugin>
                <!--
                Description from: https://docs.spring.io/spring-boot/docs/current/reference/html/build-tool-plugins-maven-plugin.html
                The Spring Boot Maven Plugin provides Spring Boot support in Maven,
                letting you package executable jar or war archives and run an application
                “in-place”. To use it, you must use Maven 3.2 (or later).
                -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <!-- Build a fully executable jar to use it via /etc/init.d
                         see https://docs.spring.io/spring-boot/docs/current/reference/html/deployment-install.html
                    -->
                    <executable>true</executable>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!--
                Description from: https://docs.joinfaces.org/current/reference/
                JoinFaces provides org.joinfaces:joinfaces-maven-plugin Maven plugin
                to configure a classpath scan at build-time in order to reduce the
                startup time of applications which use an embedded servlet container.
                -->
                <groupId>org.joinfaces</groupId>
                <artifactId>joinfaces-maven-plugin</artifactId>
            </plugin>

        </plugins>
    </build>
</project>
